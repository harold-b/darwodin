---

Defs: ../definitions/macos/modelio.json

Mono  : { Emit: false }
CSharp: { Emit: false }

Cpp:
  Emit: false
  ExportInternals: true
  DontWrapCFunctions: true
  ExportForwardDeclarations: true
  
  ExportTypes:
    - ^_*MDL.+

  ExportMethods:
    - ^::MDL.+

  ExportVars:
    - ^::k?MDL.+

  IgnoreTypes  : []
  IgnoreMethods: []


Odin:
  Emit           : true
  ExportPath     : ..
  BasePackageName: darwodin
  SingleFile     : false
  TargetPlatform : Darwin
  ExportTypeMapDir: ../exports
  ExternalTypes:
    - ../exports/CoreFoundation.exports.yml
    - ../exports/CoreGraphics.exports.yml
    - ../exports/Foundation.exports.yml
    - ../exports/QuartzCore.exports.yml
    - ../exports/Metal.exports.yml
    # - ../exports/AppKit.exports.yml

  ResolvedTypedefs:
    - '[su]?int.*'

  Packages:
    - Name  : ModelIO
      Export: MDL
      DarwinLinkLibs: [system:ModelIO.framework]
      Filter: .*

      Imports:
        - |
          Boolean :: CF.Boolean
          simd_char1       :: struct #align (1 ) { v: [1 ]i8   } // size = 1  | align = 1
          simd_char2       :: struct #align (2 ) { v: [2 ]i8   } // size = 2  | align = 2
          simd_char3       :: struct #align (4 ) { v: [3 ]i8   } // size = 4  | align = 4
          simd_char4       :: struct #align (4 ) { v: [4 ]i8   } // size = 4  | align = 4
          simd_char8       :: struct #align (8 ) { v: [8 ]i8   } // size = 8  | align = 8
          simd_char16      :: struct #align (16) { v: [16]i8   } // size = 16 | align = 16
          simd_char32      :: struct #align (16) { v: [32]i8   } // size = 32 | align = 16
          simd_char64      :: struct #align (16) { v: [64]i8   } // size = 64 | align = 16
          simd_uchar1      :: struct #align (1 ) { v: [1 ]u8   } // size = 1  | align = 1
          simd_uchar2      :: struct #align (2 ) { v: [2 ]u8   } // size = 2  | align = 2
          simd_uchar3      :: struct #align (4 ) { v: [3 ]u8   } // size = 4  | align = 4
          simd_uchar4      :: struct #align (4 ) { v: [4 ]u8   } // size = 4  | align = 4
          simd_uchar8      :: struct #align (8 ) { v: [8 ]u8   } // size = 8  | align = 8
          simd_uchar16     :: struct #align (16) { v: [16]u8   } // size = 16 | align = 16
          simd_uchar32     :: struct #align (16) { v: [32]u8   } // size = 32 | align = 16
          simd_uchar64     :: struct #align (16) { v: [64]u8   } // size = 64 | align = 16
          simd_short1      :: struct #align (2 ) { v: [1 ]i16  } // size = 2  | align = 2
          simd_short2      :: struct #align (4 ) { v: [2 ]i16  } // size = 4  | align = 4
          simd_short3      :: struct #align (8 ) { v: [3 ]i16  } // size = 8  | align = 8
          simd_short4      :: struct #align (8 ) { v: [4 ]i16  } // size = 8  | align = 8
          simd_short8      :: struct #align (16) { v: [8 ]i16  } // size = 16 | align = 16
          simd_short16     :: struct #align (16) { v: [16]i16  } // size = 32 | align = 16
          simd_short32     :: struct #align (16) { v: [32]i16  } // size = 64 | align = 16
          simd_ushort1     :: struct #align (2 ) { v: [1 ]u16  } // size = 2  | align = 2
          simd_ushort2     :: struct #align (4 ) { v: [2 ]u16  } // size = 4  | align = 4
          simd_ushort3     :: struct #align (8 ) { v: [3 ]u16  } // size = 8  | align = 8
          simd_ushort4     :: struct #align (8 ) { v: [4 ]u16  } // size = 8  | align = 8
          simd_ushort8     :: struct #align (16) { v: [8 ]u16  } // size = 16 | align = 16
          simd_ushort16    :: struct #align (16) { v: [16]u16  } // size = 32 | align = 16
          simd_ushort32    :: struct #align (16) { v: [32]u16  } // size = 64 | align = 16
          simd_int1        :: struct #align (4 ) { v: [1 ]i32  } // size = 4  | align = 4
          simd_int2        :: struct #align (8 ) { v: [2 ]i32  } // size = 8  | align = 8
          simd_int3        :: struct #align (16) { v: [3 ]i32  } // size = 16 | align = 16
          simd_int4        :: struct #align (16) { v: [4 ]i32  } // size = 16 | align = 16
          simd_int8        :: struct #align (16) { v: [8 ]i32  } // size = 32 | align = 16
          simd_int16       :: struct #align (16) { v: [16]i32  } // size = 64 | align = 16
          simd_uint1       :: struct #align (4 ) { v: [1 ]u32  } // size = 4  | align = 4
          simd_uint2       :: struct #align (8 ) { v: [2 ]u32  } // size = 8  | align = 8
          simd_uint3       :: struct #align (16) { v: [3 ]u32  } // size = 16 | align = 16
          simd_uint4       :: struct #align (16) { v: [4 ]u32  } // size = 16 | align = 16
          simd_uint8       :: struct #align (16) { v: [8 ]u32  } // size = 32 | align = 16
          simd_uint16      :: struct #align (16) { v: [16]u32  } // size = 64 | align = 16
          simd_float1      :: struct #align (4 ) { v: [1 ]f32  } // size = 4  | align = 4
          simd_float2      :: struct #align (8 ) { v: [2 ]f32  } // size = 8  | align = 8
          simd_float3      :: struct #align (16) { v: [3 ]f32  } // size = 16 | align = 16
          simd_float4      :: struct #align (16) { v: [4 ]f32  } // size = 16 | align = 16
          simd_float8      :: struct #align (16) { v: [8 ]f32  } // size = 32 | align = 16
          simd_float16     :: struct #align (16) { v: [16]f32  } // size = 64 | align = 16
          simd_long1       :: struct #align (8 ) { v: [1 ]i64  } // size = 8  | align = 8
          simd_long2       :: struct #align (16) { v: [2 ]i64  } // size = 16 | align = 16
          simd_long3       :: struct #align (16) { v: [3 ]i64  } // size = 32 | align = 16
          simd_long4       :: struct #align (16) { v: [4 ]i64  } // size = 32 | align = 16
          simd_long8       :: struct #align (16) { v: [8 ]i64  } // size = 64 | align = 16
          simd_ulong1      :: struct #align (8 ) { v: [1 ]u64  } // size = 8  | align = 8
          simd_ulong2      :: struct #align (16) { v: [2 ]u64  } // size = 16 | align = 16
          simd_ulong3      :: struct #align (16) { v: [3 ]u64  } // size = 32 | align = 16
          simd_ulong4      :: struct #align (16) { v: [4 ]u64  } // size = 32 | align = 16
          simd_ulong8      :: struct #align (16) { v: [8 ]u64  } // size = 64 | align = 16
          simd_double1     :: struct #align (8 ) { v: [1 ]f64  } // size = 8  | align = 8
          simd_double2     :: struct #align (16) { v: [2 ]f64  } // size = 16 | align = 16
          simd_double3     :: struct #align (16) { v: [3 ]f64  } // size = 32 | align = 16
          simd_double4     :: struct #align (16) { v: [4 ]f64  } // size = 32 | align = 16
          simd_double8     :: struct #align (16) { v: [8 ]f64  } // size = 64 | align = 16
          vector_float2    :: simd_float2
          vector_float3    :: simd_float3
          vector_float4    :: simd_float4
          vector_double2   :: simd_double2
          vector_double3   :: simd_double3
          vector_double4   :: simd_double4

      TypeMap:
        matrix_float4x4:  matrix[4,4]f32
        matrix_double4x4: matrix[4,4]f64
        simd_float4x4:    matrix[4,4]f32
        simd_double4x4:   matrix[4,4]f64
        simd_quatf:       quaternion128
        simd_quatd:       quaternion256
        


  # Symbol Transformers
  EnumTransforms:
  - Type: .*
    Transforms:
    - Kind  : RemoveTypeWordsFromElements
    - Kind  : RemovePartialTypeNamePrefix
    - Kind  : RemoveUnderscorePrefix
    - Kind  : UnderscoreNumbers

  TypeTransforms:
    - Type: ^(MD)Label.+
      Transforms:
      - Kind  : RemovePrefix
        Source: $group0
    - Type: ^(MDL).+
      Transforms:
      - Kind  : RemovePrefix
        Source: $group0
    - Type: Flag$ # Transforms for bit_set types
      Transforms:
      - Kind  : AppendSuffix
        Source: s
    - Type: Mask$
      Transforms:
      - Kind  : None

  BitSetMap:
    - Type: Flags?$
      Transforms:
        - Kind  : RemoveSuffix
          Source: s
    - Type: Mask$
      Transforms:
        - Kind  : AppendSuffix
          Source: Flag

  ProcTransforms:
    - Type: ^(MD)Label.+
      Transforms:
      - Kind  : RemovePrefix
        Source: $group0
    - Type: ^(_*MDL).+
      Transforms:
      - Kind  : RemovePrefix
        Source: $group0

  VarTransforms:
    - Type: ^(kMD)Label.+
      Transforms:
        - Kind  : RemovePrefix
          Source: $group0
    - Type: ^(_*MDL).+
      Transforms:
        - Kind  : RemovePrefix
          Source: $group0
